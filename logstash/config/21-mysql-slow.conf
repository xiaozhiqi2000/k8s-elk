filter {
  if [type] == "mysql-slow" {
    # drop sleep events
    #grok {
    #  match => { "message" => "# Time:" }
    #  add_tag => [ "mysqltime" ]
    #  tag_on_failure => [] # prevent default _grokparsefailure tag on real records
    #}
    #if "mysqltime" in [tags] {
    #  drop {}
    #}
    grok {
      match => [ "message", "(?m)^(?:#\s+Time)?#\s+User@Host:\s+%{USER:user}\[[^\]]+\]\s+@\s+(?:(?<clienthost>\S*))?\s+\[(?:%{IPV4:clientip})?\]\s*(?:Id:\s+%{NUMBER:id:int})?\n#\s+Query_time:\s+%{NUMBER:query_time:float}\s+Lock_time:\s+%{NUMBER:lock_time:float}\s+Rows_sent:\s+%{NUMBER:rows_sent:int}\s+Rows_examined:\s+%{NUMBER:rows_examined:int}\n\s*(?:use %{DATA:database};\s*\n)?SET\s+timestamp=%{NUMBER:timestamp};\n\s*(?<sql>(?:#\s*|\/\*master\*\/)?(?<action>\w+)\b.*;).*$"]
    }
    date {
      match => [ "timestamp", "UNIX" ]
      #remove_field => [ "timestamp" ]
    }
    mutate {
      gsub => [
          "sql", "\nSET timestamp=\d+?;\n", "",
          "sql", "\nuse [a-zA-Z0-9\-\_]+?;", "",
          "sql", "\n# Time: \d+\s+\d+:\d+:\d+", "",
          "sql", "\n/usr/local/mysql/bin/mysqld.+$", "",
          "sql", "\nTcp port:.+$", "",
          "sql", "\nTime .+$", ""
      ]
    }
    # calculate unique hash
    mutate {
      add_field => {"sql_for_hash" => "%{sql}"}
    }
    mutate {
      gsub => [
          "sql_for_hash", "'.+?'", "",
          "sql_for_hash", "-?\d*\.{0,1}\d+", ""
      ]
    }
    #checksum {
    #  algorithm => "md5"
    #  keys => ["sql_for_hash"]
    #}
    #mutate {
    #  # TODO: remove the message field
    #  remove_field => ["timestamp", "message", "sql_for_hash"]
    #}
  }
}

